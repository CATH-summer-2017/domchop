




## Deprecated OTF scatterplot that involves real-time usage of modeller        
from .utils import *
from modeller import *
from modeller.scripts import complete_pdb

with stdoutIO() as s:
    env = environ()
    env.io.atom_files_directory = ['../pdbs','$(PDBlib)/../../dompdb']
    env.libs.topology.read(file='$(LIB)/top_heav.lib')
    env.libs.parameters.read(file='$(LIB)/par.lib')
s0=StringIO.StringIO()

def scatterplot_json(sfname='1.10.30.10'):
    msg = '';
    plt.close()
    siz = [400,400]
    DPI=100.
    fig = plt.figure(figsize = [x/float(DPI) for x in siz], dpi=DPI)
    # fig.tight_layout()

    # DPI = fig.get_dpi()
    # fig.set_size_inches(400.0/float(DPI),400.0/float(DPI))    

    ax1 = fig.add_subplot(111)


    pdata = preprocess(sfname);

    ### preprocess() returns a tuple of shape (nonbonded_pair_nums, DOPE, domain_length,  domian_id)
    if not pdata:
        y2s,ys,xs,lbls = preprocess(sfname)
    else:
        y2s,ys,xs,lbls = pdata

    ax1.set_xlim([0,500])
    ax1.set_ylim([0,800E3])
    ax1.set_xlabel('Domain length (aa)')
    # ax1.set_ylabel('Number nb-interaction pairs')
    ax1.set_ylabel('Non-bonding pair count')
    # print(ax1.yaxis.get_label())
    plt.tight_layout()

    ids=[];
    for d in select_homsf(sfname).classification_set.all():
        ids.append((d.domain.id))

    # points = ax1.scatter(xs,y2s,s=33,marker = 'x',)
    # points = ax1.scatter(xs,y2s,s=30,marker = 'o',color = 'g')
    points = ax1.scatter(xs,y2s,edgecolor = 'b',facecolor = 'none',
        marker ='o',
         s =30)


    if 1:
        ((m,b),C) = np.polyfit(xs, y2s, 1, cov =True) ### This covariance seems different from the one generated by np.cov()
        # (m,b) = np.polyfit(xs, y2s, 1, cov = False)
        C = np.cov(xs,y2s)
        r_sq = cov2corr(C).flat[1] ** 2
    
    res2  = y2s - ( m*xs + b)
    outs = MAD_outlier(res2,3.0)
    outs = outs * (res2<0);
    xso = xs[outs]
    y2so = y2s[outs]
    sc1 = ax1.scatter(xso,y2so,s=33,
        color='r',
        marker = 'x',
        label='outlier num = %d'%sum(outs))

    # title = '''
    # $y  = %s \\cdot x + %s$ \n
    # $R^{2}=%3.3f $'''% (latex_float(m,4),latex_float(b,4),r_sq)

    title = '''
    y  = %5.3f * x + %5.3f 
    R_squared=%3.3f '''% (m,b,r_sq)
    xmm = np.array([min(xs),max(xs)])
    ax1.plot(xmm, m*xmm + b, 'g--',label = 'linear regression fit')

    ax1.legend()

    title +=msg;
    ax1.set_title(
        title)

    tooltip = mpld3.plugins.PointLabelTooltip(points, labels=lbls)
    mpld3.plugins.connect(fig, tooltip)
    mpld3.plugins.connect(fig, HelloWorld(points,ids))
    jdict = mpld3.fig_to_dict(fig);
    jstr = json.dumps(jdict);
    # fig.show()
    # plt.close("all")
#     mpld3.show()
    return(jdict)
